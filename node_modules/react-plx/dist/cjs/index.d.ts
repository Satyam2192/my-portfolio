import React, { CSSProperties, ReactNode } from "react";
export declare type PlxProperty = {
    startValue: string | number;
    endValue: string | number;
    property: string;
    unit?: string;
};
declare type EasingNames = "ease" | "easeIn" | "easeOut" | "easeInOut" | "easeInSine" | "easeOutSine" | "easeInOutSine" | "easeInQuad" | "easeOutQuad" | "easeInOutQuad" | "easeInCubic" | "easeOutCubic" | "easeInOutCubic" | "easeInQuart" | "easeOutQuart" | "easeInOutQuart" | "easeInQuint" | "easeOutQuint" | "easeInOutQuint" | "easeInExpo" | "easeOutExpo" | "easeInOutExpo" | "easeInCirc" | "easeOutCirc" | "easeInOutCirc";
declare type Easing = EasingNames | [number, number, number, number] | ((t: number) => number);
declare type CSSValueString = `${number}px` | `${number}%` | `${number}vh`;
declare type StartEnd = CSSValueString | "self" | string | number | HTMLElement;
declare type Duration = CSSValueString | string | number | HTMLElement;
export declare type PlxItem = {
    start: StartEnd;
    startOffset?: CSSValueString | number;
    duration?: Duration;
    end?: StartEnd;
    endOffset?: CSSValueString | number;
    properties: PlxProperty[];
    easing?: Easing;
    name?: string;
};
export interface PlxProps extends React.HTMLAttributes<HTMLOrSVGElement> {
    animateWhenNotInViewport?: boolean;
    children?: ReactNode;
    className?: string;
    disabled?: boolean;
    freeze?: boolean;
    parallaxData: PlxItem[];
    style?: CSSProperties;
    onPlxStart?: () => void;
    onPlxEnd?: () => void;
    tagName?: React.ElementType;
}
declare const Plx: React.FC<PlxProps>;
export default Plx;
